{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Form","handleNameChange","newName","handleNumberChange","newNumber","handleSubmit","onSubmit","value","onChange","type","Filter","persons","newSearch","handleDelete","length","filter","person","name","toLowerCase","includes","map","p","number","onClick","Phonebook","handleSearchChange","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","setMessage","sucess","setSucess","useEffect","personService","then","response","data","e","target","preventDefault","personObject","window","confirm","find","catch","error","setTimeout","concat","array","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2cce1dd.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\n\nconst del = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\nexport default {\n  getAll: getAll,\n  create: create,\n  del: del,\n  update: update,\n};\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newSearch, setNewSearch] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [sucess, setSucess] = useState(null);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (persons.filter((person) => person.name === personObject.name).length) {\n      if (\n        window.confirm(\n          `${newName} is already added to the phonebook,replace the old number with a new one?`\n        )\n      ) {\n        const id = persons.find((p) => p.name === newName).id;\n        personService\n          .update(id, personObject)\n          .then((response) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== id ? person : response.data\n              )\n            );\n          })\n          .catch((error) => {\n            setSucess(false);\n            setMessage(\n              `Information of ${newName} has already been removed from the server`\n            );\n            setSucess(true);\n            setMessage(`Added ${newName}`);\n            setTimeout(() => {\n              setMessage(null);\n              setSucess(null);\n            }, 5000);\n          });\n      }\n    } else {\n      personService.create(personObject).then((response) => {\n        setPersons(persons.concat(response.data));\n        setSucess(true);\n        setMessage(`Added ${newName}`);\n        setTimeout(() => {\n          setMessage(null);\n          setSucess(null);\n        }, 5000);\n\n        setNewName(\"\");\n        setNewNumber(\"\");\n      });\n    }\n  }\n\n  function handleNameChange(e) {\n    setNewName(e.target.value);\n  }\n  function handleNumberChange(e) {\n    setNewNumber(e.target.value);\n  }\n\n  function handleSearchChange(e) {\n    setNewSearch(e.target.value);\n  }\n\n  function handleDelete(person) {\n    if (window.confirm(`Delete ${person.name}? `)) {\n      personService.del(person.id).then((response) => {\n        let array = [...persons]; // make a separate copy of the array\n        array.splice(persons.id - 1, 1);\n\n        setPersons(array);\n      });\n    }\n  }\n\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} sucess={sucess} />\n\n      <Phonebook\n        newSearch={newSearch}\n        handleSearchChange={handleSearchChange}\n      />\n      <h2>Add a new</h2>\n\n      <Form\n        handleSubmit={handleSubmit}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Filter\n        persons={persons}\n        newSearch={newSearch}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nconst Form = ({\n  handleNameChange,\n  newName,\n  handleNumberChange,\n  newNumber,\n  handleSubmit,\n}) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst Filter = ({ persons, newSearch, handleDelete }) => {\n  return (\n    <div>\n      {newSearch.length > 0\n        ? persons\n            .filter((person) => {\n              return person.name\n                .toLowerCase()\n                .includes(newSearch.toLowerCase());\n            })\n            .map((p) => {\n              return (\n                <p key={p.name}>\n                  {p.name} {p.number}\n                </p>\n              );\n            })\n        : persons.map((person) => {\n            return (\n              <p key={person.name}>\n                {person.name} {person.number}\n                <button\n                  onClick={() => {\n                    handleDelete(person);\n                  }}\n                >\n                  DELETE\n                </button>\n              </p>\n            );\n          })}\n    </div>\n  );\n};\n\nconst Phonebook = ({ newSearch, handleSearchChange }) => {\n  return <input value={newSearch} onChange={handleSearchChange} />;\n};\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"sucess\">{message}</div>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}